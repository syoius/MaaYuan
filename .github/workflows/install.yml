name: install

on:
  push:
    tags:
      - "v*"
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  pull_request:
    branches:
      - "**"
    paths:
      - ".github/workflows/install.yml"
      - "assets/**"
      - "**.py"
  workflow_dispatch:

permissions:
  contents: write
  actions: write

jobs:
  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $($is_release) ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo tag=$tag | tee -a $GITHUB_OUTPUT
          echo is_release=$is_release | tee -a $GITHUB_OUTPUT
    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  windows:
    needs: meta
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Embed Python on Windows
        shell: bash
        run: |
          python tools/ci/setup_embed_python.py

      - name: Install
        shell: bash
        run: |
          ./install/python/python.exe ./install4release.py ${{ needs.meta.outputs.tag }}

      - name: Download MFAAvalonia
        id: download_mfa
        uses: robinraju/release-downloader@v1
        with:
          repository: syoius/MFAAvalonia
          fileName: "MFAAvalonia-*-win-${{ (matrix.arch == 'x86_64' && 'x64') || (matrix.arch == 'aarch64' && 'arm64') }}*"
          latest: true
          out-file-path: "MFAAvalonia"
          extract: true

      - name: Install MFAAvalonia
        shell: bash
        run: |
          rm -rf MFAAvalonia/resource/base/model
          find MFAAvalonia -name "MFAAvalonia-*.zip" -type f -delete
          cp -r MFAAvalonia/* install

      - uses: actions/upload-artifact@v4
        with:
          name: MaaYuan-win-${{ matrix.arch }}
          path: "install"

  linux:
    needs: meta
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install on Linux
        shell: bash
        run: |
          python3 ./install4release.py ${{ needs.meta.outputs.tag }}

      - name: Download MFAAvalonia for Linux
        id: download_mfa
        uses: robinraju/release-downloader@v1
        with:
          repository: syoius/MFAAvalonia
          fileName: "MFAAvalonia-*-linux-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}*"
          latest: true
          out-file-path: "MFAAvalonia"
          extract: true

      - name: Install MFAAvalonia
        shell: bash
        run: |
          rm -rf MFAAvalonia/resource/base/model
          find MFAAvalonia -name "MFAAvalonia-*.zip" -type f -delete
          cp -r MFAAvalonia/* install

      - uses: actions/upload-artifact@v4
        with:
          name: MaaYuan-linux-${{ matrix.arch }}
          path: "install"

  macos:
    needs: meta
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [aarch64, x86_64]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup Embed Python on macOS
        shell: bash
        run: |
          python3 tools/ci/setup_embed_python.py
          EMBED_PYTHON_PATH="./install/python/bin/python3"
          if [ -f "$EMBED_PYTHON_PATH" ]; then
            echo "Setting execute permission for $EMBED_PYTHON_PATH"
            chmod +x "$EMBED_PYTHON_PATH"
          else
            echo "Warning: Embedded Python executable not found at $EMBED_PYTHON_PATH. Skipping chmod."
          fi

      - name: Install on macOS
        shell: bash
        run: |
          PYTHON_EXECUTABLE="./install/python/bin/python3"
          echo "Using Python executable: $PYTHON_EXECUTABLE for macOS (${{ matrix.arch }})"
          $PYTHON_EXECUTABLE ./install4release.py ${{ needs.meta.outputs.tag }}

      - name: Download MFAAvalonia for macOS
        id: download_mfa
        uses: robinraju/release-downloader@v1
        with:
          repository: syoius/MFAAvalonia
          fileName: "MFAAvalonia-*-osx-${{ matrix.arch == 'x86_64' && 'x64' || 'arm64' }}*"
          latest: true
          out-file-path: "MFAAvalonia"
          extract: true

      - name: Install MFAAvalonia
        shell: bash
        run: |
          rm -rf MFAAvalonia/resource/base/model
          find MFAAvalonia -name "MFAAvalonia-*.zip" -type f -delete
          cp -r MFAAvalonia/* install
          cp ./MFAUpdater install

      - uses: actions/upload-artifact@v4
        with:
          name: MaaYuan-macos-${{ matrix.arch }}
          path: "install"

  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    needs: [meta, windows, linux, macos]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: assets

      - name: Process and package artifacts
        run: |
          cd assets
          for f in *; do
            if [[ $f == *"win"* ]]; then
              (cd $f && zip -r ../$f-${{ needs.meta.outputs.tag }}.zip .)
            else
              echo "Processing Unix artifact: $f"

              # 为主要可执行文件设置权限
              if [[ -f "$f/MaaPiCli" ]]; then
                chmod +x $f/MaaPiCli
                echo "Set execute permission for $f/MaaPiCli"
              fi

              if [[ -f "$f/MFAAvalonia" ]]; then
                chmod +x $f/MFAAvalonia
                echo "Set execute permission for $f/MFAAvalonia"
              fi

              # 为Python解释器设置执行权限 (处理不同可能的路径)
              PYTHON_PATHS=(
                "$f/python/bin/python3"
                "$f/python/python"
                "$f/python/bin/python"
                "$f/python/python.exe"
              )
              for PYTHON_PATH in "${PYTHON_PATHS[@]}"; do
                if [[ -f "$PYTHON_PATH" ]]; then
                  chmod +x "$PYTHON_PATH"
                  echo "Set execute permission for $PYTHON_PATH"
                fi
              done

              # 使用带有'p'标志的tar命令来保留权限
              tar -cpzf $f-${{ needs.meta.outputs.tag }}.tar.gz -C $f .
              echo "Created archive with preserved permissions: $f-${{ needs.meta.outputs.tag }}.tar.gz"
            fi
          done

      - uses: softprops/action-gh-release@v2
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}
          generate_release_notes: true

      - name: Trigger MirrorChyanUploading
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
